[base]
name = neurodamus

[tox]
envlist = format, unit, unit-ngv-mpi, unit-mpi, baseline, integration-e2e, scientific

[testenv]
deps =
    -r tests/requirements.txt

[testenv:baseline]
deps =
    {[testenv]deps}
    pytest-cov
setenv =
    PYTHONPATH={toxinidir}
    COVERAGE_FILE = .coverage.baseline
commands =
    pytest --cov=neurodamus --cov-report=term-missing tests/test_import.py

[testenv:unit]
deps =
    {[testenv]deps}
    pytest-cov
    neuron-nightly
    morphio
setenv =
    NEURON_INIT_MPI=0
    PYTHONPATH={toxinidir}
    COVERAGE_FILE = .coverage.unit
allowlist_externals =
    {toxinidir}/ci/build_ndcore.sh
    sh
commands =
    {toxinidir}/ci/build_ndcore.sh {toxinidir}/neurodamus/data {toxworkdir}
    sh -c ". {toxworkdir}/.envfile && pytest -x --cov=neurodamus --cov-report=term-missing --forked {posargs:tests/unit}"

[testenv:unit-ngv-mpi]
deps =
    {[testenv]deps}
    pytest-cov
    neuron-nightly
    morphio
    -r tests/unit-mpi/requirements.txt
setenv =
    PYTHONPATH={toxinidir}
    NEURON_INIT_MPI=1    
    RDMAV_FORK_SAFE=1
    COVERAGE_FILE = .coverage.unit-ngv-mpi
allowlist_externals =
    {toxinidir}/ci/build_ndcore.sh
    sh
commands =
    {toxinidir}/ci/build_ndcore.sh -ngv {toxinidir}/neurodamus/data {toxworkdir}
    sh -c ". {toxworkdir}/.envfile && pytest -x --cov=neurodamus --cov-report=term-missing {posargs:tests/unit-ngv-mpi}"

[testenv:unit-mpi]
# Please you need to spack load neurodamus-models model=neocortex +coreneuron or use an equivalent spack virtual env
deps =
    {[testenv]deps}
    pytest-cov
    neuron-nightly
    -r tests/unit-mpi/requirements.txt
setenv =
    PYTHONPATH={toxinidir}
    NEURON_INIT_MPI=1
    RDMAV_FORK_SAFE=1
    COVERAGE_FILE = .coverage.unit-mpi
allowlist_externals =
    {toxinidir}/ci/build_ndcore.sh
    sh
commands =
    {toxinidir}/ci/build_ndcore.sh {toxinidir}/neurodamus/data {toxworkdir}
    sh -c ". {toxworkdir}/.envfile && pytest -x --cov=neurodamus --cov-report=term-missing {posargs:tests/unit-mpi}"

[testenv:integration-e2e]
# Please you need to spack load neurodamus-models model=neocortex +coreneuron or use an equivalent spack virtual env
passenv = *
setenv =
    PYTHONPATH={toxinidir}:{env:PYTHONPATH}
    HOC_LIBRARY_PATH={toxinidir}/neurodamus/data/hoc:{env:HOC_LIBRARY_PATH}
    NEURON_INIT_MPI=1
commands =
    python -c "import os; print(os.environ.get('HOC_LIBRARY_PATH', ''))"
    pytest -s -x --forked --durations=5 --durations-min=15 {posargs:tests/integration-e2e}

[testenv:removeme]
# Please you need to spack load neurodamus-models model=neocortex +coreneuron or use an equivalent spack virtual env
passenv = *
setenv =
    PYTHONPATH={toxinidir}:{env:PYTHONPATH}
    HOC_LIBRARY_PATH={toxinidir}/neurodamus/data/hoc:{env:HOC_LIBRARY_PATH}
    NEURON_INIT_MPI=1
commands =
    python -c "import os; print(os.environ.get('HOC_LIBRARY_PATH', ''))"
    pytest -s -x --durations=5 --durations-min=15 --forked --basetemp={toxinidir}/removeme {posargs:tests/integration-e2e/test_reports.py}

[testenv:scientific]
# Please you need to spack load neurodamus-models model=neocortex +coreneuron or use an equivalent spack virtual env
passenv = *
setenv =
    PYTHONPATH={toxinidir}:{env:PYTHONPATH}
    HOC_LIBRARY_PATH={toxinidir}/neurodamus/data/hoc:{env:HOC_LIBRARY_PATH}
    NEURON_INIT_MPI=1
commands =
    python -c "import os; print(os.environ.get('HOC_LIBRARY_PATH', ''))"
    pytest -s -x --forked --durations=5 --durations-min=15 {posargs:tests/scientific}

[testenv:lint]
skip_install = True
deps =
    ruff
commands =
    ruff format --check neurodamus
    ruff check neurodamus

[testenv:format]
skip_install = True
deps =
    ruff
commands =
    ruff format neurodamus
    ruff check --fix neurodamus

[testenv:docs]
changedir = docs
extras = docs
commands =
    make clean
    make html SPHINXOPTS=-W  # make warnings into errors with -W sphinx option
allowlist_externals = make
