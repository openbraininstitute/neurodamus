Simulator Outputs
=================

This page describes the outputs generated by the simulator. All output files are placed relative to the directory where the simulation is executed. This section explains the content and purpose of each file or folder created by the simulator.

Base Directory
--------------

After a successful run, the base directory (i.e., where the simulation was launched) will contain the following files:

- **Simulation log file**:  
  A file named ``pydamus_<date>_<time>.log`` is created during the simulation. It contains runtime information, including progress updates, warnings, and error messages (if any). This log is essential for debugging and performance diagnostics.

- **Completion flag**:  
  If the simulation completes successfully, an empty file named ``simulation_config.json.SUCCESS`` is written. This is used by the Blue Brain Project (BBP) workflow system to detect successful execution. The presence of this file indicates the run ended without errors.

output/
-------

This folder contains the simulation results, including all reports requested in ``simulation_config.json``. The exact location of the ``output`` folder is specified within the configuration file.

Contents:

- **Reports**:  
  All the time series or scalar reports explicitly configured in ``simulation_config.json`` are saved here. The format and structure depend on the report type and backend.

- **Spike files**:  
  The final spike output is written in two formats:
  
  - ``out.dat``: Plain text file listing spike events (only present when using CoreNEURON)
  - ``out.h5``: HDF5 version of the same data for efficient access

More info here: `SONATA Developer Guide â€“ Spike File <https://github.com/AllenInstitute/sonata/blob/master/docs/SONATA_DEVELOPER_GUIDE.md#spike-file>`_


  Both contain a table with two columns:
  
  1. **gid** - the global identifier of the neuron that spiked  
  2. **time** - the time (in ms) at which the spike occurred

- **populations_offset.dat**:  
  This file contains the offset indices for each neuron population. It is primarily used for visualization and internal processing. It helps map GIDs back to their corresponding populations.

.. note::

   If the simulation was run with CoreNEURON and either the ``--keep-build`` flag was specified or the simulation failed midway, this folder may also contain internal files. These files are described in the **save** section below.

save/
-----

This folder is only relevant when running the simulation with **CoreNEURON**. It is enabled via the CLI option ``--save=<path>`` and contains internal files necessary to support save/restore functionality. It is not used with NEURON. It does not need to be insde ``output`` anymore.

Contents:

- **populations_offset.dat**:  
  Same file as described in the ``output/`` folder. This is duplicated here for convenience or redundancy in restoration workflows.

- **1_2.dat** and **time.dat**:  
  Binary files required by CoreNEURON to resume simulations. These files store internal simulator state and time-related metadata.

- **sim.conf**:  
  A plain-text configuration file preserving the internal state and runtime parameters of CoreNEURON at the time of saving.

- **report.conf**:  
  A hybrid binary/text file containing GID lists and other metadata necessary to resume report generation after a restore. It ensures that the restored simulation continues to write reports as originally configured.

- **coreneuron_input/**:  
  This subfolder contains additional runtime state and mechanism files split by MPI rank. When running with multiple ranks, this folder may contain a large number of files. If ``--restore=`` was specified it is a link to the ``coreneuron_input`` in that folder. Contents include:

  - ``<rank>_1.dat``, ``<rank>_2.dat``, ``<rank>_3.dat``:  
    Binary files, one set per rank, holding internal data structures necessary to restart the simulation for each compute unit.

  - ``bbcore_mech.dat``:  
    A text file describing the mechanisms used in the simulation (e.g., ion channels, synapses), including implementation details for reinitialization.

  - ``globals.dat``:  
    Text file storing the values of global variables required by mechanisms or model components.

  - ``files.dat``:  
    This file manages the list or mapping of internal data files used by CoreNEURON. 

.. note::

   This folder is only created if the ``--save`` option is used and the simulation backend is CoreNEURON. Its contend it left in ``output`` if ``--keep-build`` is used. The files are not intended for direct user access and are managed by the simulator.

restore/
--------

The simulator can resume a previously saved simulation state by using the ``--restore=<path>`` option. This functionality is available **only with CoreNEURON**.

The path provided to ``--restore`` must point to a folder that was previously created with ``--save`` and must contain all the files described in the ``save/`` section.

When restoring, the simulator will:

- Load all internal state from binary files such as ``1_2.dat`` and ``time.dat``
- Re-initialize report generation using ``report.conf``
- Resume simulation from the saved timestamp

.. note::

   If any file is missing or inconsistent in the restore folder, the simulation may fail to start or behave incorrectly.





