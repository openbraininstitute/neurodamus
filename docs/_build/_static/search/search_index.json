{"config": {}, "docs": [{"location": "../index.html", "text": "Neurodamus This is the documentation of Neurodamus . Contents Overview Description Install Examples Docker container Acknowledgment License Inputs simulation_config.json circuit_config.json node_sets.json Run a Sonata Simulation The Sonata simulation input files Additional Examples Supported features SONATA FAQ Examples Basic Usage Resource estimation Neurodamus for Developers Neurodamus as a High-Level API for neuron Neurodamus advanced simulation example Developer Documentation Historical Note Neurodamus Core Concepts Node Cells Cell Managers Connection Manager Load Balance Dry Run Development Developing a Custom Neurodamus Neurodamus-py package Requirements Install Neurodamus for development Editing HOC Files Running Tests Prepared Config Files The quick path way Installing With Spack Memory Load Balance Tutorial Introduction Dry Run Model Instantiation Rebalance Simulation More on Neurodamus Wiki Neurodamus Core Reference Packages neurodamus Package neurodamus.core Package neurodamus.io Package neurodamus.utils Package Sub-Modules Neurodamus Sub-Modules Neurodamus.core Sub-Modules Neurodamus.io Sub-Modules Neurodamus.utils Sub-Modules Changelog Version 3.7.2 Version 3.7.1 Version 3.7.0 Version 3.6.0 Version 3.5.0 Version 3.4.0 Version 3.3.0 Version 3.2.1 Version 3.2.0 Version 3.1.1 Version 3.1.0 Version 3.0.0 Version 2.17.0 Version 2.16.6 Version 2.16.5 Version 2.16.4 Version 2.16.3 Version 2.16.2 Version 2.16.1 Version 2.16.0 Version 2.15.3 Version 2.15.2 Version 2.15.1 Version 2.15.0 Version 2.14.0 Version 2.13.2 Version 2.13.1 Version 2.13.0 Version 2.12.11 Version 2.12.10 Version 2.12.9 Version 2.12.8 Version 2.12.7 Version 2.12.6 Version 2.12.5 Version 2.12.4 Version 2.12.3 Version 2.12.2 Version 2.12.1 Version 2.12.0 Version 2.11.3 Version 2.11.2 Version 2.11.1 Version 2.11.0 Version 2.10.3 Version 2.10.2 Version 2.8.0 Version 2.7.0 Version 2.6.0 Version 2.5.3 Version 2.5.2 Version 2.5.1 Version 2.5.0 Version 2.4.0 Version 2.3.1 Version 2.3.0 Version 2.2.1 Version 2.1.2 Version 2.0.2 Vesion 2.0.0 Version 1.3.1 Version 1.2.1 Version 1.1.0 Version 1.0.0 Version 0.9.0 Version 0.8.1 Version 0.8.0 Version 0.7.2 Version 0.7.1 Version 0.7.0 Version 0.6.0 Version 0.5.0 Version 0.4.0 Version 0.3.0 Version 0.2.2 Version 0.2.1 Version 0.1.0 Indices and tables Index Module Index Search Page", "title": "Neurodamus"}, {"location": "../inputs.html", "text": "Simulation Inputs This page provides an overview of the nomenclature used for inputs in a Neurodamus circuit simulation. It assumes the reader is already familiar with the NEURON software and its terminology. Otherwise, here are the docs . For much more detailed information about the input files and the SONATA format, the reader can refer to the SONATA Docs . simulation_config.json This is the main SONATA file that controls the simulation settings. Key fields include: What reports the simulator should generate. The duration of the simulation. A report is one of the possible outputs of the simulation. It typically consists of a time trace of a specific value (e.g., voltage) recorded per neuron. Reports can also be generated per neuronal section. circuit_config.json Defines how neurons are structured and connected. It can be seen as a graph of graphs, representing interactions between different neuron populations. This file references: nodes.h5 : Contains neuron properties. Note that these nodes are unrelated to neurodamus.node.Node , which is a low-level simulation orchestrator. edges.h5 : Defines connections between neurons. A population is a group of neurons that interact within themselves and with other populations. NEURON does not have a concept of populations\u2014this is specific to Neurodamus. Neurons in nodes.h5 are primarily defined by their Electrical Type (EType) and Morphology Type (MType) . ETypes : Ion channel distributions that have been reverse-engineered from specific firing patterns. Assigning an ion channel distribution (distributed mechanisms) to a population often involves genetic algorithms and trial-and-error. They are provided as hoc files, and the path to the folder containing all EType hoc files for a circuit is specified in circuit_config.json . Individual neurons reference their assigned EType in nodes.h5 . MTypes : Categories of neuron morphologies (graph structures). Some neurons have extensive branching, while others feature a single prominent axon. NEURON itself does not recognize MTypes, as it requires instantiated neurons in memory rather than generic morphology categories. However, Neurodamus uses MTypes to facilitate circuit development. Morphologies : Specific instances of MTypes. During circuit building, multiple neuron structures (graphs of sections) are generated from MTypes and stored in .asc (NeuronLucida) or .swc files. These morphology files are referenced in nodes.h5 . circuit_config.json also specifies the directory containing these morphology files. Due to the complexity of generating many neurons, some morphologies may be reused. node_sets.json This file specifies which neurons (by GID) are included in a particular simulation. It overrides the default selection provided in circuit_config.json , which typically includes all neurons unless node_sets.json is supplied.", "title": "Simulation Inputs"}, {"location": "../genindex.html", "text": "", "title": null}, {"location": "../py-modindex.html", "text": "", "title": null}, {"location": "../search.html", "text": "", "title": null}]}