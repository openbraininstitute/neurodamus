@startuml classes_neurodamus
set namespaceSeparator none
class "AbsoluteShotNoise" as neurodamus.stimulus_manager.AbsoluteShotNoise {
  IsNoise : bool
  mean : float
  rel_skew : float
  sd : float
  compute_parameters(cell)
  parse_check_stim_parameters(stim_info: dict)
}
class "AlphaSynapse" as neurodamus.core.synapses.AlphaSynapse {
  gmax : NoneType
  onset : NoneType
  tau : NoneType
}
class "ArtificialStim" as neurodamus.connection.ArtificialStim {
  netcons : list
  netstims : list
  restart_events()
}
class "Astrocyte" as neurodamus.ngv.Astrocyte {
  endfeet
  gid
  glut_list
  connect2target(target_pp)
  create_endfeet(size)
  getThreshold()
  getVersion()
  set_pointers()
}
class "AstrocyteManager" as neurodamus.ngv.AstrocyteManager {
  CellType
  post_stdinit()
}
class "AttributeCollector" as neurodamus.modification_manager.ConfigureAllSections.AttributeCollector {
  attrs : set
  visit_Attribute(node)
}
class "AutoBalanceModeParams" as neurodamus.core.configuration.LoadBalanceMode.AutoBalanceModeParams {
  cell_count : int
  duration : int
  mpi_ranks : int
  multisplit_cpu_cell_ratio : int
}
class "AxonSection" as neurodamus.core.cell.Cell.Builder.AxonSection {
}
class "BaseCell" as neurodamus.metype.BaseCell {
  CCell
  CellRef
  raw_gid : NoneType
  connect2target(target_pp)
  {abstract}re_init_rng(ion_seed)
}
class "BaseStim" as neurodamus.stimulus_manager.BaseStim {
  IsNoise : bool
  delay : float
  duration : float
  represents_physical_electrode
}
class "Builder" as neurodamus.core.cell.Cell.Builder {
  add_soma(diam, name)
}
class "Cell" as neurodamus.core.cell.Cell {
  Mechanisms
  all
  apical_dendrites
  axons
  builder
  dendrites
  gid : int
  soma
  add_synapse(src_seg, target_seg, syn_props_obj)
  add_synaptic_receptor(target_seg, syn_props_obj)
  connect_to(synapse_receptor, threshold, delay, weight)
  init_soma(diam, name)
  load_morphology(morpho_path, export_commands)
  section_info(section)
  show_topology()
}
class "<color:red>CellCreationError</color>" as neurodamus.core.cell.CellCreationError {
}
class "CellDistributor" as neurodamus.cell_distributor.CellDistributor {
  load_nodes(load_balancer)
}
class "CellManagerBase" as neurodamus.cell_distributor.CellManagerBase {
  CellType : NotImplementedType
  cells
  circuit_name
  circuit_target
  connection_managers
  gid2cell
  is_default
  is_virtual
  local_nodes
  pc
  population_name
  target_manager
  total_cells
  {abstract}enable_report(report_conf, target_name, use_coreneuron)
  finalize()
  getGidListForProcessor()
  get_cell(gid)
  get_cellref(gid)
  get_final_gids()
  is_initialized()
  load_artificial_cell(gid, artificial_cell)
  load_nodes(load_balancer)
  {abstract}post_stdinit()
  pre_stdinit()
  record_spikes(gids, append_spike_vecs)
  register_connection_manager(conn_manager: ConnectionManagerBase)
}
class "<color:red>CellReaderError</color>" as neurodamus.io.cell_readers.CellReaderError {
}
class "CellSynapse" as neurodamus.core.synapses.CellSynapse {
  get_netcon_conf()
  get_synpase_conf()
}
class "Cell_V6" as neurodamus.metype.Cell_V6 {
  exc_mini_frequency
  extra_attrs
  inh_mini_frequency
  local_to_global_matrix
  delete_axon()
  local_to_global_coord_mapping(points)
}
class "CircuitConfig" as neurodamus.core.configuration.CircuitConfig {
  CellLibraryFile : NoneType
  CircuitPath
  CircuitTarget : NoneType
  DetailedAxon : bool
  Engine : NoneType
  MEComboInfoFile : NoneType
  METypePath : NoneType
  MorphologyPath : NoneType
  MorphologyType : NoneType
  PopulationID : int
  nrnPath
}
class "CircuitManager" as neurodamus.node.CircuitManager {
  alias : dict
  base_cell_manager
  edge_managers : defaultdict
  global_manager
  global_target
  node_managers : dict
  virtual_node_managers : dict
  all_node_managers()
  all_synapse_managers()
  get_create_edge_manager(conn_type, source, destination, src_target, manager_args)
  get_edge_manager(source, destination, conn_type)
  get_edge_managers(source, destination)
  get_node_manager(name)
  get_population_offsets()
  get_virtual_population_offsets()
  has_population(pop_name)
  initialized()
  new_node_manager(circuit, target_manager, run_conf)
  new_node_manager_bare(circuit: CircuitConfig, target_manager, run_conf)
  read_population_offsets(read_virtual_pop)
  register_node_manager(cell_manager)
  unalias_pop_keys(source, destination)
  write_population_offsets()
}
class "CliOptions" as neurodamus.core.configuration.CliOptions {
  build_model : NoneType
  coreneuron_direct_mode : bool
  crash_test : bool
  dry_run : bool
  enable_coord_mapping : bool
  enable_shm : bool
  experimental_stims : bool
  keep_axon : bool
  keep_build : bool
  lb_mode : NoneType
  model_path : NoneType
  model_stats : bool
  modelbuilding_steps : NoneType
  num_target_ranks : NoneType
  output_path : NoneType
  restore : NoneType
  restrict_connectivity : int
  restrict_features
  restrict_node_populations
  restrict_stimulus
  save : bool
  save_time : NoneType
  simulate_model : bool
  simulator : NoneType
}
class "CompartmentMapping" as neurodamus.core.coreneuron_configuration.CompartmentMapping {
  cell_distributor
  pc
  create_section_vectors(section_id, section, secvec, segvec)
  process_section(cell, sections, num_electrodes, all_lfp_factors, section_offset)
  register_mapping()
}
class "ConductanceSource" as neurodamus.core.stimuli.ConductanceSource {
  attach_to(section, position)
}
class "ConfigT" as neurodamus.utils.pyutils.ConfigT {
  REQUIRED
  all
  apply(obj, subset, excludes)
  as_dict(subset, excludes)
  get()
  set_defaults()
}
class "<color:red>ConfigurationError</color>" as neurodamus.core.configuration.ConfigurationError {
}
class "ConfigureAllSections" as neurodamus.modification_manager.ConfigureAllSections {
  assignment_targets(node)
  compartment_cast(target, subset)
  parse_section_config(config)
}
class "ConnDebugger" as neurodamus.connection_manager.ConnectionManagerBase.ConnDebugger {
  yielded_src_gids : NoneType, array
  register(sgid, base_tgid, syns_params)
}
class "Connection" as neurodamus.connection.Connection {
  ConnUtils : NoneType
  locked : bool
  minis_spont_rate : NoneType
  sections_with_synapses
  add_single(cell_manager, syn_params, syn_id)
  add_synapse(syn_tpoints, params_obj, syn_id)
  add_synapse_configuration(configuration)
  add_synapses(target_manager, synapses_params, base_id)
  configure_synapses(configuration)
  disable(set_zero_conductance)
  enable()
  finalize(cell, base_seed)
  finalize_gap_junctions(cell, offset, end_offset)
  override_mod(mod_override)
  replay(tvec, start_delay)
  restart_events()
  update_weights(weight, update_also_replay_netcons)
}
class "ConnectionBase" as neurodamus.connection.ConnectionBase {
  locked : bool
  population_id
  sgid : int
  synapse_params
  synapses
  synapses_offset
  syndelay_override : NoneType
  tgid : int
  weight_factor : int
  add_delayed_weight(delay, weight)
  disable()
  enable()
  {abstract}finalize(cell, base_seed)
  netcon_set_type(netcon, syn_obj, nc_type)
  update_conductance(new_g)
  update_synapse_parameters()
  update_weights(weight)
}
class "ConnectionManagerBase" as neurodamus.connection_manager.ConnectionManagerBase {
  CONNECTIONS_TYPE : NoneType
  ConnectionSet
  SynapseReader
  cell_manager
  circuit_conf
  conn_factory
  connection_count
  current_population
  dst_node_population
  is_file_open
  src_cell_manager
  src_node_population
  src_pop_offset
  target_pop_offset
  all_connections()
  configure_connections(conn_conf)
  configure_group(conn_config, gidvec)
  configure_group_delayed(conn_config, gidvec)
  connect_all(weight_factor, only_gids)
  connect_group(conn_source, conn_destination, synapse_type_restrict, mod_override)
  create_connections(src_target, dst_target)
  delete(sgid, tgid, population_ids)
  delete_group(post_gids, pre_gids, population_ids)
  disable(sgid, tgid, also_zero_conductance, population_ids)
  disable_group(post_gids, pre_gids, also_zero_conductance, population_ids)
  finalize(base_seed, sim_corenrn)
  find_populations(population_ids)
  get_connections(post_gids, pre_gids, population_ids)
  get_disabled(post_gid)
  get_population(src_pop_id, dst_pop_id)
  get_target_connections(src_target_name, dst_target_name, selected_gids, conn_population)
  open_edge_location(syn_source, circuit_conf)
  open_synapse_file(synapse_file, edge_population)
  reenable(sgid, tgid, population_ids)
  reenable_all(post_gids)
  reenable_group(post_gids, pre_gids, population_ids)
  replay()
  restart_events()
  select_connection_set(src_pop_id, dst_pop_id)
  {abstract}setup_delayed_connection(conn_config)
  update_connections(src_target, dst_target, gidvec, syn_configure, weight)
}
class "ConnectionSet" as neurodamus.connection_manager.ConnectionSet {
  dst_id
  dst_name : NoneType
  src_id
  src_name : NoneType
  virtual_source : bool
  all_connections()
  count()
  delete(sgid, tgid)
  delete_group(post_gids, pre_gids)
  get(item)
  get_connection(sgid, tgid)
  get_connections(post_gids, pre_gids)
  get_or_create_connection(sgid, tgid)
  get_synapse_params_gid(target_gid)
  ids_match(population_ids, dst_second)
  is_default()
  items()
  store_connection(conn)
  target_gids()
}
class "ConnectionTypes" as neurodamus.io.sonata_config.ConnectionTypes {
  name
}
class "ConsoleColors" as neurodamus.utils.pyutils.ConsoleColors {
  BLACK
  BLINK
  BLUE
  BOLD
  CYAN
  DEFAULT
  DIM
  GREEN
  HIDDEN
  INVERTED
  MAGENTA
  NORMAL
  RED
  UNDERLINED
  WHITE
  YELLOW
  format_text(text, color, style)
  reset()
  set_text_color(color)
}
class "Constant" as neurodamus.core.stimuli.CurrentSource.Constant {
  attach_to(section, position)
}
class "CurrentSource" as neurodamus.core.stimuli.CurrentSource {
  attach_to(section, position)
}
class "CustomSynapseParameters" as neurodamus.io.synapse_reader.SonataReader._load_synapse_parameters.CustomSynapseParameters {
}
class "DendriteSection" as neurodamus.core.cell.Cell.Builder.DendriteSection {
}
class "DryRunStats" as neurodamus.utils.memory.DryRunStats {
  base_memory
  cell_memory_total : int
  metype_cell_syn_average : Counter
  metype_counts : Counter
  metype_memory : dict
  pop_metype_gids : dict
  simulation_estimate : float
  suggested_nodes : int
  synapse_counts : defaultdict
  synapse_memory_total : int
  add(other)
  check_all_buckets_have_gids(bucket_allocation, population, num_ranks, cycles)
  collect_all_mpi()
  collect_display_syn_counts()
  defaultdict_float()
  defaultdict_vector()
  display_node_suggestions()
  display_total()
  distribute_cells(num_ranks: int, cycles: int, metype_file, batch_size) -> Tuple[dict, dict, dict]
  distribute_cells_with_validation(num_ranks, cycles, metype_file) -> Tuple[dict, dict, dict]
  estimate_cell_memory() -> float
  export_cell_memory_usage()
  get_num_target_ranks(num_ranks)
  import_allocation_stats(filename, cycle_i, ignore_cache) -> dict
  suggest_nodes(margin)
  total_memory_available()
  try_import_cell_memory_usage()
  validate_inputs_distribute(num_ranks, batch_size)
}
class "EmptyCell" as neurodamus.metype.EmptyCell {
  gid
}
class "EngineBase" as neurodamus.core._engine.EngineBase {
  CellManagerCls : NoneType
  CircuitPrecedence : int
  ConnectionTypes : dict
  InnerConnectivityCls : NoneType
  new_cell_manager(circuit_conf, target_parser, run_conf)
  new_synapse_manager(circuit_conf, target_manager, cell_manager)
  report(target_parser, rep_target, corenrn_conf, cell_manager)
}
class "Exp2Syn" as neurodamus.core.synapses.Exp2Syn {
  tau1 : NoneType
  tau2 : NoneType
}
class "ExpSyn" as neurodamus.core.synapses.ExpSyn {
  tau : NoneType
}
class "Feature" as neurodamus.core.configuration.Feature {
  name
}
class "<color:red>FormatNotSupported</color>" as neurodamus.io.synapse_reader.FormatNotSupported {
}
class "GapJunctionConnParameters" as neurodamus.gap_junction.GapJunctionConnParameters {
  create_array(length)
}
class "GapJunctionManager" as neurodamus.gap_junction.GapJunctionManager {
  CONNECTIONS_TYPE : GapJunction
  SynapseReader
  holding_ic_per_gid : NoneType, dict
  seclamp_current_per_gid : NoneType, dict
  {abstract}configure_connections(conn_conf)
  create_connections()
  finalize()
  open_synapse_file(synapse_file)
}
class "GapJunctionSynapseReader" as neurodamus.gap_junction.GapJunctionSynapseReader {
  Parameters
  parameter_mapping : dict
}
class "GlioVascularManager" as neurodamus.ngv.GlioVascularManager {
  CONNECTIONS_TYPE : GlioVascular
  InnerConnectivityCls : NoneType
  create_connections()
  {abstract}finalize()
  open_edge_location(sonata_source, circuit_conf)
}
class "GlobalCellManager" as neurodamus.cell_distributor.GlobalCellManager {
  finalize()
  getGidListForProcessor()
  getPopulationInfo(gid)
  getSpGid(gid)
  get_cell(gid)
  get_cellref(gid)
  get_final_gids()
  register_manager(cell_manager)
}
class "GlobalConfig" as neurodamus.core.configuration.GlobalConfig {
  debug_conn : NoneType
  verbosity : int
  set_mpi()
}
class "GroupedMultiMap" as neurodamus.utils.multimap.GroupedMultiMap {
  flat_values()
  flatten()
  get(key, default)
  get_items(key)
  size()
}
class "HH" as neurodamus.core.mechanisms.HH {
  el : NoneType
  gkbar : NoneType
  gl : NoneType
  gnabar : NoneType
  h : NoneType
  ik : NoneType
  ina : NoneType
  m : NoneType
  n : NoneType
}
class "HocEntity" as neurodamus.core._neuron.HocEntity {
  h
}
class "Hocify" as neurodamus.hocify.Hocify {
  fasthoclogfile
  convert(morpho_folder)
}
class "Hyperpolarizing" as neurodamus.stimulus_manager.Hyperpolarizing {
  amp_end
  amp_start
  compute_parameters(cell)
  parse_check_all_parameters(stim_info: dict)
}
class "InhExcSpontMinis" as neurodamus.connection.InhExcSpontMinis {
  rate_vec_exc : NoneType
  rate_vec_inh
  create_on(conn, sec, position, syn_obj, syn_params)
  get_rate()
  has_data()
}
class "LFPManager" as neurodamus.lfp_manager.LFPManager {
  get_node_id_subsets(node_id, population_name)
  get_number_electrodes(gid, population_info)
  get_sonata_node_id(gid, population_info)
  load_lfp_config(lfp_weights_file, population_list)
  read_lfp_factors(gid, population_info)
}
class "Linear" as neurodamus.stimulus_manager.Linear {
  amp_end : float
  amp_start : float
  stimList : list
  {abstract}compute_parameters(cell)
  parse_check_all_parameters(stim_info: dict)
}
class "List" as neurodamus.utils.compat.List {
  count(obj)
  o(idx)
}
class "LoadBalance" as neurodamus.cell_distributor.LoadBalance {
  lb_mode
  population
  target_cpu_count : int
  generate_load_balance(target_spec, cell_distributor)
  load_balance_info(target_spec)
  select_lb_mode(sim_config, run_conf, target)
  valid_load_distribution(target_spec: TargetSpec) -> bool
}
class "LoadBalanceMode" as neurodamus.core.configuration.LoadBalanceMode {
  name
  auto_select(use_neuron, cell_count, duration, auto_params)
  parse(lb_mode)
}
class "LogLevel" as neurodamus.core.configuration.LogLevel {
  DEBUG : int
  DEFAULT : int
  ERROR_ONLY : int
  VERBOSE : int
}
class "MComplexLoadBalancer" as neurodamus.core._neuron.MComplexLoadBalancer {
}
class "METype" as neurodamus.metype.METype {
  KEEP_AXON_FLAG : int
  exc_mini_frequency : NoneType
  extra_attrs : NoneType
  gid
  inh_mini_frequency : NoneType
  morpho_extension : str
  synlist
  connect2target(target_pp)
  {abstract}delete_axon()
  getHypAmp()
  getThreshold()
  getVersion()
  re_init_rng(ion_seed)
  setHypAmp(value)
  setThreshold(value)
}
class "METypeEngine" as neurodamus.node.METypeEngine {
  CellManagerCls
  CircuitPrecedence : int
  ConnectionTypes : dict
  InnerConnectivityCls
}
class "METypeItem" as neurodamus.metype.METypeItem {
  add_params : NoneType
  combo_name : NoneType
  emodel_tpl : NoneType
  etype : NoneType
  exc_mini_frequency : float
  extra_attrs : dict
  fullmtype : NoneType
  holding_current : float
  inh_mini_frequency : float
  layer : NoneType
  local_to_global_matrix : NoneType, bool, ndarray
  morph_name
  mtype : NoneType
  threshold_current : float
  local_to_global_coord_mapping(points)
}
class "METypeManager" as neurodamus.metype.METypeManager {
  gids
  insert(gid, morph_name)
  load_infoNP(gidvec, morph_list, model_templates, mtypes, etypes, threshold_currents, holding_currents, exc_mini_freqs, inh_mini_freqs, positions, rotations, add_params_list)
  retrieve_info(gid)
}
class "Map" as neurodamus.utils.compat.Map {
  String
  hoc_map
  keys
  as_dict(parse_strings)
  get(key, default)
  items()
  update(other_map)
  values()
}
class "Mechanism" as neurodamus.core.mechanisms.Mechanism {
  HH : NoneType
  PAS : NoneType
  apply(obj_or_list)
}
class "<color:red>MissingSpikesPopulationError</color>" as neurodamus.replay.MissingSpikesPopulationError {
}
class "ModificationManager" as neurodamus.modification_manager.ModificationManager {
  interpret(target_spec, mod_info)
  register_type(mod_class)
}
class "ModulationConnParameters" as neurodamus.neuromodulation_manager.ModulationConnParameters {
}
class "MorphIOWrapper" as neurodamus.morphio_wrapper.MorphIOWrapper {
  morph
  section_index2name_dict
  section_typeid_distrib
  mksubset(type_id, freq, type_name)
  morph_as_hoc()
  name(type_id, index)
  type2name(type_id)
}
class "MultiMap" as neurodamus.utils.multimap.MultiMap {
  exists
  concat(v1, v2)
  data()
  find(key)
  get(key, default)
  get_items(key)
  items()
  keys()
  sort_together(np_keys, values)
  values()
}
class "NGVEngine" as neurodamus.ngv.NGVEngine {
  CellManagerCls
  ConnectionTypes : dict
}
class "NetConType" as neurodamus.connection.NetConType {
  name
}
class "NeuroGliaConnManager" as neurodamus.ngv.NeuroGliaConnManager {
  CONNECTIONS_TYPE : NeuroGlial
  SynapseReader
  conn_factory
  finalize(base_Seed)
}
class "NeuroGliaConnParameters" as neurodamus.ngv.NeuroGliaConnParameters {
}
class "NeuroGlialConnection" as neurodamus.ngv.NeuroGlialConnection {
  neurons_attached : set
  neurons_not_found : set
  add_synapse(syn_tpoints, params_obj, syn_id)
  finalize(astrocyte, base_Seed)
}
class "NeuroGlialSynapseReader" as neurodamus.ngv.NeuroGlialSynapseReader {
  LOOKUP_BY_TARGET_IDS : bool
  Parameters
  custom_parameters : set
}
class "NeuroModulationConnection" as neurodamus.neuromodulation_manager.NeuroModulationConnection {
  neuromod_dtc
  neuromod_strength
  finalize(cell, base_seed)
}
class "NeuroModulationManager" as neurodamus.neuromodulation_manager.NeuroModulationManager {
  CONNECTIONS_TYPE : NeuroModulation
  SynapseReader
  conn_factory
}
class "NeuroModulationSynapseReader" as neurodamus.neuromodulation_manager.NeuroModulationSynapseReader {
  Parameters
  custom_parameters : set
}
class "Neurodamus" as neurodamus.node.Neurodamus {
  init()
  run(cleanup)
}
class "NeuronStdrunDefaults" as neurodamus.core.configuration.NeuronStdrunDefaults {
  global_ra : float
  nstep_steprun : int
  realtime : int
  stdrun_quiet : int
  steps_per_ms : float
  stoprun : int
  tstop : int
  using_cvode_ : int
  v_init : int
}
class "NoRestriction" as neurodamus.core.configuration.CliOptions.NoRestriction {
}
class "Node" as neurodamus.node.Node {
  ReportParams : ReportParams
  circuits
  reports
  stim_manager
  stims
  syn_total_memory : NoneType
  target_manager
  all_circuits(exclude_disabled)
  cleanup()
  clear_model(avoid_creating_objs, avoid_clearing_queues)
  compute_load_balance()
  create_cells(load_balance)
  create_synapses()
  dump_cell_config()
  dump_circuit_config(suffix)
  enable_modifications()
  enable_replay()
  enable_reports()
  enable_stimulus()
  execute_neuron_configures()
  load_targets()
  run_all()
  sim_init(corenrn_gen)
  solve(tstop)
  sonata_spikes()
}
class "NodeSet" as neurodamus.core.nodeset.NodeSet {
  meta
  add_gids(gids, gid_info)
  clear_cell_info()
  extend(other)
  intersection(other, raw_gids)
  items(final_gid)
  raw_gids()
}
class "NodeSetReader" as neurodamus.target_manager.NodeSetReader {
  names
  nodesets
  read_nodeset(nodeset_name: str)
  register_node_file(node_file)
}
class "NodesetTarget" as neurodamus.target_manager.NodesetTarget {
  local_nodes : NoneType
  name
  nodesets : List[_NodeSetBase]
  population_names
  populations
  append_nodeset(nodeset: NodeSet)
  generate_subtargets(n_parts)
  getPointList(cell_manager)
  get_gids()
  get_hoc_target()
  get_local_gids(raw_gids)
  get_raw_gids()
  gid_count()
  is_void()
  make_subtarget(pop_name)
  update_local_nodes(local_nodes)
}
class "Noise" as neurodamus.stimulus_manager.Noise {
  IsNoise : bool
  dt : float
  is_relative : bool
  mean : float
  mean_perc : float
  stimCount : int
  stimList : list
  var : float
  var_perc : float
  compute_parameters(cell)
  draw_already_used_numbers(rng, dt)
  parse_check_all_parameters(stim_info: dict)
}
class "OrnsteinUhlenbeck" as neurodamus.stimulus_manager.OrnsteinUhlenbeck {
  IsNoise : bool
  dt : float
  mean : float
  reversal : float
  seed : int
  sigma : float
  stimCount : int
  stimList : list
  tau : float
  {abstract}compute_parameters(cell)
  parse_check_all_parameters(stim_info: dict)
  parse_check_stim_parameters(stim_info)
}
class "<color:red>OtherRankError</color>" as neurodamus.core._mpi.OtherRankError {
}
class "PAS" as neurodamus.core.mechanisms.PAS {
  e : NoneType
  g : NoneType
  i : NoneType
}
class "PointCell" as neurodamus.metype.PointCell {
  CCell
  CellRef
  all
  exc_mini_frequency : float
  getHypAmp
  getThreshold
  gid
  inh_mini_frequency : float
  input_resistance
  nSecAll
  raw_gid : NoneType
  soma : list
  synHelperList : list
  synlist : list
  connect2target(target_pp)
  {abstract}re_init_rng(ion_seed)
}
class "PopulationNodes" as neurodamus.core.nodeset.PopulationNodes {
  max_gid : int
  name
  nodesets
  offset : int
  all()
  create_pop(population_name)
  freeze_offsets()
  get(population_name)
  offset_freezer()
  register(population, nodeset)
  reset()
}
class "Progress" as neurodamus.utils.progressbar.Progress {
  completion_ratio
  progress
  time_taken
  iter(iterable, end, start)
  iteritems(iterable)
  itervalues(iterable)
  reset()
}
class "ProgressBar" as neurodamus.utils.progressbar.ProgressBar {
  progress
  show_progress()
}
class "ProgressBarRank0" as neurodamus.core._utils.ProgressBarRank0 {
}
class "Pulse" as neurodamus.stimulus_manager.Pulse {
  amp : float
  freq : float
  stimList : list
  width : float
  parse_check_all_parameters(stim_info: dict)
}
class "PyMap" as neurodamus.utils.compat.PyMap {
  hoc_map
  as_dict()
}
class "RNG" as neurodamus.core.random.RNG {
  create(ids, seed)
}
class "RNGConfig" as neurodamus.core.configuration.RNGConfig {
  IonChannelSeed : NoneType
  MinisSeed : NoneType
  StimulusSeed : NoneType
  SynapseSeed : NoneType
  global_seed : NoneType
}
class "Random123" as neurodamus.core.random.Random123 {
}
class "RelativeLinear" as neurodamus.stimulus_manager.RelativeLinear {
  amp_end
  amp_start
  perc_end : float
  perc_start : float
  compute_parameters(cell)
  parse_check_all_parameters(stim_info: dict)
}
class "RelativeOrnsteinUhlenbeck" as neurodamus.stimulus_manager.RelativeOrnsteinUhlenbeck {
  IsNoise : bool
  get_relative
  mean
  mean_perc : float
  sigma
  sigma_perc : float
  compute_parameters(cell)
  parse_check_stim_parameters(stim_info)
}
class "RelativeShotNoise" as neurodamus.stimulus_manager.RelativeShotNoise {
  IsNoise : bool
  get_relative
  mean_perc : float
  rel_skew : float
  sd_perc : float
  compute_parameters(cell)
  parse_check_stim_parameters(stim_info: dict)
}
class "ReplayMode" as neurodamus.connection.ReplayMode {
  name
}
class "ReplayStim" as neurodamus.connection.ReplayStim {
  time_vec : NoneType
  add_spikes(hoc_tvec)
  create_on(conn, sec, syn_obj, syn_params)
  has_data()
}
class "Report" as neurodamus.report.Report {
  CURRENT_INJECTING_PROCESSES : set
  INTRINSIC_CURRENTS : set
  alu_list : list
  report
  report_dt
  scaling_mode : int
  use_coreneuron : bool
  variable_name : str
  add_compartment_report(cell_obj, point, vgid, pop_name, pop_offset)
  add_summation_report(cell_obj, point, collapsed, vgid, pop_name, pop_offset)
  add_summation_var_and_commit_alu(alu_helper, section_index, gid, population_name)
  add_synapse_report(cell_obj, point, vgid, pop_name, pop_offset)
  add_variable_to_alu(alu_helper, obj, variable, scalar)
  determine_scaling_mode(scaling_option)
  enable_fast_imem(mechanism)
  get_point_processes(section, mechanism)
  handle_currents_and_point_processes(section, x, alu_helper, variable_names)
  handle_intrinsic_current(section, x, alu_helper, mechanism, area_at_x)
  handle_point_processes(section, x, alu_helper, point_processes, variable)
  is_point_process_at_location(point_process, section, x)
  parse_variable_names()
  process_mechanism(section, x, alu_helper, mechanism, variable, area_at_x)
  setup_alu_for_summation(alu_x, collapsed)
}
class "SEClamp" as neurodamus.stimulus_manager.SEClamp {
  rs : float
  stimList : list
  vhold : float
  parse_check_all_parameters(stim_info: dict)
}
class "SHMUtil" as neurodamus.core._shmutils.SHMUtil {
  nnodes : int
  node_id : int
  get_datadir_shm(datadir)
  get_mem_avail()
  get_mem_total()
  get_node_rss()
  get_nodewise_rss()
  get_shm_avail()
  get_shm_factor()
  is_node_id_known()
}
class "Section" as neurodamus.core.cell.Cell.Builder.Section {
  APICAL_DENDRITE : int
  AXON : int
  DENDRITE : int
  SOMA : int
  parent : NoneType, bool
  sec_type : NoneType
  sub_nodes : list
  this
  add(name, length, n_segments)
  add_axon(name, length, n_segments)
  add_dendrite(name, length, n_segments, apical)
  append(name, length, n_segments)
  append_axon(name, length, n_segments)
  append_dendrite(name, length, n_segments, apical)
  attach()
  chain()
  create()
  get_root()
  set_parent(parent)
}
class "SectionList" as neurodamus.core.cell.SectionList {
}
class "SelectionNodeSet" as neurodamus.core.nodeset.SelectionNodeSet {
  final_gids_iter()
  intersection(other: _NodeSetBase, raw_gids, _quick_check)
  intersects(other)
  raw_gids()
  raw_gids_iter()
}
class "SerializedSections" as neurodamus.target_manager.SerializedSections {
  isec2sec
  num_sections : int
}
class "ShotNoise" as neurodamus.stimulus_manager.ShotNoise {
  IsNoise : bool
  amp_mean : float
  amp_var : float
  dt : float
  rate : float
  reversal : float
  seed : int
  stimCount : int
  stimList : list
  tau_D : float
  tau_R : float
  {abstract}compute_parameters(cell)
  params_from_mean_sd(mean, sd)
  parse_check_all_parameters(stim_info: dict)
  parse_check_stim_parameters(stim_info: dict)
}
class "SignalSource" as neurodamus.core.stimuli.SignalSource {
  stim_vec
  time_vec
  add_noise(mean, variance, duration, dt)
  add_ornstein_uhlenbeck(tau, sigma, mean, duration, dt)
  add_pulse(max_amp, duration)
  add_pulses(pulse_duration, amp)
  add_ramp(amp1, amp2, duration)
  add_segment(amp, duration, amp2)
  add_shot_noise(tau_D, tau_R, rate, amp_mean, amp_var, duration, dt)
  add_sin(amp, total_duration, freq, step)
  {abstract}add_sinspec(start, dur)
  add_train(amp, frequency, pulse_duration, total_duration)
  delay(duration)
  noise(mean, variance, duration, dt, base_amp)
  ornstein_uhlenbeck(tau, sigma, mean, duration, dt, base_amp)
  plot(ylims)
  pulse(max_amp, duration, base_amp)
  ramp(amp1, amp2, duration, base_amp)
  reset()
  shot_noise(tau_D, tau_R, rate, amp_mean, var, duration, dt, base_amp)
  sin(amp, total_duration, freq, step, base_amp)
  train(amp, frequency, pulse_duration, total_duration, base_amp)
}
class "Simulation" as neurodamus.core._neuron.Simulation {
  args : dict
  recordings : dict
  t_vec : NoneType
  v_init : int
  get_voltages_at(section)
  plot()
  record_activity(section, rel_pos)
  run(t_stop)
  run_continue(t_stop)
}
class "SimulationProgress" as neurodamus.core._utils.SimulationProgress {
  last_time_check
  sim_start
  update_progress()
}
class "Sinusoidal" as neurodamus.stimulus_manager.Sinusoidal {
  amp : float
  dt : float
  freq : float
  stimList : list
  parse_check_all_parameters(stim_info: dict)
}
class "SonataConfig" as neurodamus.io.sonata_config.SonataConfig {
  Circuit
  Conditions
  circuits
  parsedConnects
  parsedElectrodes
  parsedInjects
  parsedModifications
  parsedProjections
  parsedReports
  parsedRun
  parsedStimuli
}
class "SonataReader" as neurodamus.io.synapse_reader.SonataReader {
  EMPTY_DATA : dict
  LOOKUP_BY_TARGET_IDS : bool
  Parameters
  SYNAPSE_INDEX_NAMES : tuple
  custom_parameters : set
  parameter_mapping : dict
  get_conn_counts(tgids)
  get_counts(tgids)
  get_property(gid, field_name)
  has_nrrp()
  has_property(field_name)
  preload_data(gids, minimal_mode)
}
class "SpikeManager" as neurodamus.replay.SpikeManager {
  dump_ascii(f, gid_offset)
  filter_map(pre_gids)
  get_map()
  open_spike_file(filename, delay, population)
}
class "SpontMinis" as neurodamus.connection.SpontMinis {
  rate
  rate_vec : NoneType
  tbins_vec : NoneType
  create_on(conn, sec, position, syn_obj, syn_params, base_seed, _rate_vec)
  get_rate()
  has_data()
  set_rate(rate)
}
class "StimulusManager" as neurodamus.stimulus_manager.StimulusManager {
  interpret(target_spec, stim_info)
  interpret_extracellulars(injects, stimuli)
  register_type(stim_class)
  reset_helpers()
  saveStatePreparation(ss_obj)
}
class "SubThreshold" as neurodamus.stimulus_manager.SubThreshold {
  amp_end : float
  amp_start
  perc_less : float
  compute_parameters(cell)
  parse_check_all_parameters(stim_info: dict)
}
class "SynapseMemoryUsage" as neurodamus.utils.memory.SynapseMemoryUsage {
  get_memory_usage(count, synapse_type)
}
class "SynapseParameters" as neurodamus.io.synapse_reader.SynapseParameters {
  create_array(length)
}
class "SynapseReader" as neurodamus.io.synapse_reader.SynapseReader {
  configure_override(mod_override)
  create(syn_src, population)
  get_synapse_parameters(gid)
  {abstract}has_nrrp()
  {abstract}has_property(field_name)
  {abstract}preload_data(ids)
}
class "SynapseRuleManager" as neurodamus.connection_manager.SynapseRuleManager {
  CONNECTIONS_TYPE : Synaptic
  finalize(base_seed, sim_corenrn)
  replay(spike_manager, src_target_name, dst_target_name, start_delay)
  setup_delayed_connection(conn_config)
}
class "TPointList" as neurodamus.target_manager.TPointList {
  gid
  sclst : list
  x : list
  append()
  count()
}
class "TTX" as neurodamus.modification_manager.TTX {
  compartment_cast(target, subset)
}
class "<color:red>TargetError</color>" as neurodamus.target_manager.TargetError {
}
class "TargetManager" as neurodamus.target_manager.TargetManager {
  local_nodes : list
  clear_simulation_data()
  create_global_target()
  getMETypes(target_name)
  getPointList(target)
  get_target(target_spec: TargetSpec, target_pop)
  gid_to_sections(gid)
  intersecting(target1, target2)
  load_targets(circuit)
  location_to_point(gid, isec, ipt, offset)
  pathways_overlap(conn1, conn2, equal_only)
  register_cell_manager(cell_manager)
  register_local_nodes(local_nodes)
  register_target(target)
}
class "TargetSpec" as neurodamus.target_manager.TargetSpec {
  GLOBAL_TARGET_NAME : str
  is_full
  name : NoneType
  population : NoneType
  simple_name
  disjoint_populations(other)
  matches(pop, target_name)
  overlap(other)
  overlap_byname(other)
}
class "Vector" as neurodamus.utils.compat.Vector {
  x
  as_hoc()
  size()
}
class "VirtualCellPopulation" as neurodamus.cell_distributor.VirtualCellPopulation {
  circuit_target : NoneType
  is_default
  is_virtual
  local_nodes
  population_name
}
class "VirtualSpikeSource" as neurodamus.core.synapses.VirtualSpikeSource {
  interval : NoneType
  noise : NoneType
  number : NoneType
  start : NoneType
  connect_to(synapse_receptor, weight, threshold, delay)
}
class "WeakList" as neurodamus.utils.pyutils.WeakList {
  append(item)
}
class "_CellManager" as neurodamus.cell_distributor._CellManager {
  getCell(gid)
  {abstract}getGidListForProcessor()
  getMEType(gid)
  {abstract}get_cell(gid)
  get_cellref(gid)
  {abstract}get_final_gids()
}
class "_Clamp" as neurodamus.core.stimuli.CurrentSource._Clamp {
  clamp
  detach()
}
class "_ConfigFlag" as neurodamus.utils.pyutils.ConfigT._ConfigFlag {
}
class "_CoreNEURONConfig" as neurodamus.core.coreneuron_configuration._CoreNEURONConfig {
  artificial_cell_object : NoneType
  datadir : str
  default_cell_permute : int
  output_root : str
  report_config_file : str
  restore_path : NoneType
  sim_config_file : str
  instantiate_artificial_cell()
  psolve_core(save_path, restore_path, coreneuron_direct_mode)
  update_tstop(report_name, nodeset_name, tstop)
  write_population_count(count)
  write_report_config(report_name, target_name, report_type, report_variable, unit, report_format, target_type, dt, start_time, end_time, gids, buffer_size)
  write_report_count(count, mode)
  write_sim_config(tstop, dt, forwardskip, prcellgid, celsius, v_init, pattern, seed, model_stats, enable_reports)
  write_spike_filename(filename)
  write_spike_population(population_name, population_offset)
}
class "_DynamicClamp" as neurodamus.core.stimuli.ConductanceSource._DynamicClamp {
  clamp
  stim_vec
  time_vec
  detach()
}
class "_EngineMeta" as neurodamus.core._engine._EngineMeta {
  connection_types
  engines
  find_plugins()
  get(name)
}
class "_LevelColorFormatter" as neurodamus.utils.logging._LevelColorFormatter {
  COLORS : dict
  format(record)
}
class "_MPI" as neurodamus.core._mpi._MPI {
  MAX : int
  MIN : int
  SUM : int
  pc
  rank
  size
  check_no_errors()
  py_reduce(local_counter, aggregated_object, reduce_f)
  py_sum(local_counter, aggregated_object)
}
class "_NeurodamusCore" as neurodamus.core._neurodamus._NeurodamusCore {
  dt
  pc
  t : float, int
  h()
  init()
}
class "_Neuron" as neurodamus.core._neuron._Neuron {
  HocEntity : NoneType
  LoadBalance : NoneType
  Section : NoneType
  Segment : NoneType
  Simulation : NoneType
  h()
  load_dll(dll_path)
  load_hoc(mod_name)
  require()
  run_sim(t_stop)
  section_in_stack(sec)
}
class "_NodeSetBase" as neurodamus.core.nodeset._NodeSetBase {
  max_gid
  offset
  population_name
  final_gids()
  intersection(_other, _raw_gids)
  intersects(other)
  raw_gids()
  register_global(population_name, is_base_pop)
  unregister_all()
}
class "_SimConfig" as neurodamus.core.configuration._SimConfig {
  base_circuit : NoneType
  beta_features : NoneType
  buffer_time : int
  build_model : bool
  cell_requirements
  cli_options : NoneType
  config_file : NoneType
  configures : NoneType
  connections : NoneType
  coreneuron_datadir : NoneType
  coreneuron_direct_mode : bool
  coreneuron_outputdir : NoneType
  corenrn_buff_size : int
  crash_test_mode : bool
  current_dir : NoneType
  default_neuron_dt : float
  delete_corenrn_data : bool
  dry_run : bool
  extra_circuits : NoneType
  extracellular_calcium : NoneType
  injects : NoneType
  loadbal_mode : NoneType
  modelbuilding_steps : int
  modifications : NoneType
  num_target_ranks : NoneType
  output_root : NoneType
  projections : NoneType
  reports : NoneType
  restore : NoneType
  restore_coreneuron
  rng_info : NoneType
  run_conf : NoneType
  save : NoneType
  save_time : NoneType
  secondorder : NoneType
  simulate_model : bool
  simulation_config_dir : NoneType
  sonata_circuits : NoneType
  spike_location : str
  spike_threshold : int
  stimuli : NoneType
  synapse_options : dict
  use_coreneuron : bool
  use_neuron : bool
  check_cell_requirements(target_manager)
  check_connections_configure(target_manager)
  get_stim_inject(stim_name)
  init(config_file, cli_options)
  requisitor(f)
  update_connection_blocks(alias)
  validator(f)
}
class "_SpikeSource" as neurodamus.core.synapses._SpikeSource {
  {abstract}connect_to(synapse_receptor, weights, threshold, delay)
}
class "_SynParametersMeta" as neurodamus.io.synapse_reader._SynParametersMeta {
  all_fields
  create_array(length)
  fields(exclude: set, with_translation: dict)
}
class "_SynapseReceptor" as neurodamus.core.synapses._SynapseReceptor {
  e : NoneType
  i : NoneType
  create_on()
}
class "_TargetInterface" as neurodamus.target_manager._TargetInterface {
  {abstract}append_nodeset(nodeset: NodeSet)
  contains(items, raw_gids)
  {abstract}generate_subtargets(n_parts)
  {abstract}get_gids()
  {abstract}get_hoc_target()
  {abstract}get_raw_gids()
  {abstract}gid_count()
  intersects(other)
  {abstract}is_void()
  {abstract}make_subtarget(pop_name)
  {abstract}update_local_nodes(_local_nodes)
}
class "_Timer" as neurodamus.utils.timeit._Timer {
  accumulated
  hits
  name
  total_time
  log(keyword, seq_no)
  start()
  stop()
}
class "_TimerManager" as neurodamus.utils.timeit._TimerManager {
  archive(archive_name)
  init(name)
  timeit_show_stats()
  update(name, verbose)
}
class "classproperty" as neurodamus.utils.pyutils.classproperty {
  getter
}
class "run_only_rank0" as neurodamus.core._utils.run_only_rank0 {
  nested_depth : int
}
class "timeit" as neurodamus.utils.timeit.timeit {
  curr_path : list
}
neurodamus.cell_distributor.CellDistributor --|> neurodamus.cell_distributor.CellManagerBase
neurodamus.cell_distributor.CellManagerBase --|> neurodamus.cell_distributor._CellManager
neurodamus.cell_distributor.GlobalCellManager --|> neurodamus.cell_distributor._CellManager
neurodamus.connection.Connection --|> neurodamus.connection.ConnectionBase
neurodamus.connection.InhExcSpontMinis --|> neurodamus.connection.SpontMinis
neurodamus.connection.ReplayStim --|> neurodamus.connection.ArtificialStim
neurodamus.connection.SpontMinis --|> neurodamus.connection.ArtificialStim
neurodamus.connection_manager.SynapseRuleManager --|> neurodamus.connection_manager.ConnectionManagerBase
neurodamus.core._neurodamus._NeurodamusCore --|> neurodamus.core._neuron._Neuron
neurodamus.core._utils.ProgressBarRank0 --|> neurodamus.utils.progressbar.Progress
neurodamus.core.cell.Cell --|> neurodamus.core.synapses._SpikeSource
neurodamus.core.cell.Cell.Builder.AxonSection --|> neurodamus.core.cell.Cell.Builder.Section
neurodamus.core.cell.Cell.Builder.DendriteSection --|> neurodamus.core.cell.Cell.Builder.Section
neurodamus.core.configuration.CircuitConfig --|> neurodamus.utils.pyutils.ConfigT
neurodamus.core.configuration.CliOptions --|> neurodamus.utils.pyutils.ConfigT
neurodamus.core.configuration.RNGConfig --|> neurodamus.utils.pyutils.ConfigT
neurodamus.core.mechanisms.HH --|> neurodamus.core.mechanisms.Mechanism
neurodamus.core.mechanisms.Mechanism --|> neurodamus.utils.pyutils.ConfigT
neurodamus.core.mechanisms.PAS --|> neurodamus.core.mechanisms.Mechanism
neurodamus.core.nodeset.NodeSet --|> neurodamus.core.nodeset._NodeSetBase
neurodamus.core.nodeset.SelectionNodeSet --|> neurodamus.core.nodeset._NodeSetBase
neurodamus.core.random.Random123 --|> neurodamus.core.random.RNG
neurodamus.core.stimuli.ConductanceSource --|> neurodamus.core.stimuli.SignalSource
neurodamus.core.stimuli.CurrentSource --|> neurodamus.core.stimuli.SignalSource
neurodamus.core.synapses.AlphaSynapse --|> neurodamus.core.synapses._SynapseReceptor
neurodamus.core.synapses.CellSynapse --|> neurodamus.core.synapses._SpikeSource
neurodamus.core.synapses.CellSynapse --|> neurodamus.core.synapses._SynapseReceptor
neurodamus.core.synapses.Exp2Syn --|> neurodamus.core.synapses._SynapseReceptor
neurodamus.core.synapses.ExpSyn --|> neurodamus.core.synapses._SynapseReceptor
neurodamus.core.synapses.VirtualSpikeSource --|> neurodamus.core.synapses._SpikeSource
neurodamus.core.synapses.VirtualSpikeSource --|> neurodamus.utils.pyutils.ConfigT
neurodamus.core.synapses._SynapseReceptor --|> neurodamus.utils.pyutils.ConfigT
neurodamus.gap_junction.GapJunctionConnParameters --|> neurodamus.io.synapse_reader.SynapseParameters
neurodamus.gap_junction.GapJunctionManager --|> neurodamus.connection_manager.ConnectionManagerBase
neurodamus.gap_junction.GapJunctionSynapseReader --|> neurodamus.io.synapse_reader.SonataReader
neurodamus.io.synapse_reader.SonataReader --|> neurodamus.io.synapse_reader.SynapseReader
neurodamus.io.synapse_reader.SonataReader._load_synapse_parameters.CustomSynapseParameters --|> neurodamus.io.synapse_reader.SynapseParameters
neurodamus.metype.Cell_V6 --|> neurodamus.metype.METype
neurodamus.metype.EmptyCell --|> neurodamus.metype.BaseCell
neurodamus.metype.METype --|> neurodamus.metype.BaseCell
neurodamus.neuromodulation_manager.ModulationConnParameters --|> neurodamus.io.synapse_reader.SynapseParameters
neurodamus.neuromodulation_manager.NeuroModulationConnection --|> neurodamus.connection.Connection
neurodamus.neuromodulation_manager.NeuroModulationManager --|> neurodamus.connection_manager.SynapseRuleManager
neurodamus.neuromodulation_manager.NeuroModulationSynapseReader --|> neurodamus.io.synapse_reader.SonataReader
neurodamus.ngv.Astrocyte --|> neurodamus.metype.BaseCell
neurodamus.ngv.AstrocyteManager --|> neurodamus.cell_distributor.CellDistributor
neurodamus.ngv.GlioVascularManager --|> neurodamus.connection_manager.ConnectionManagerBase
neurodamus.ngv.NGVEngine --|> neurodamus.core._engine.EngineBase
neurodamus.ngv.NeuroGliaConnManager --|> neurodamus.connection_manager.ConnectionManagerBase
neurodamus.ngv.NeuroGliaConnParameters --|> neurodamus.io.synapse_reader.SynapseParameters
neurodamus.ngv.NeuroGlialConnection --|> neurodamus.connection.Connection
neurodamus.ngv.NeuroGlialSynapseReader --|> neurodamus.io.synapse_reader.SonataReader
neurodamus.node.METypeEngine --|> neurodamus.core._engine.EngineBase
neurodamus.node.Neurodamus --|> neurodamus.node.Node
neurodamus.stimulus_manager.AbsoluteShotNoise --|> neurodamus.stimulus_manager.ShotNoise
neurodamus.stimulus_manager.Hyperpolarizing --|> neurodamus.stimulus_manager.Linear
neurodamus.stimulus_manager.Linear --|> neurodamus.stimulus_manager.BaseStim
neurodamus.stimulus_manager.Noise --|> neurodamus.stimulus_manager.BaseStim
neurodamus.stimulus_manager.OrnsteinUhlenbeck --|> neurodamus.stimulus_manager.BaseStim
neurodamus.stimulus_manager.Pulse --|> neurodamus.stimulus_manager.BaseStim
neurodamus.stimulus_manager.RelativeLinear --|> neurodamus.stimulus_manager.Linear
neurodamus.stimulus_manager.RelativeOrnsteinUhlenbeck --|> neurodamus.stimulus_manager.OrnsteinUhlenbeck
neurodamus.stimulus_manager.RelativeShotNoise --|> neurodamus.stimulus_manager.ShotNoise
neurodamus.stimulus_manager.SEClamp --|> neurodamus.stimulus_manager.BaseStim
neurodamus.stimulus_manager.ShotNoise --|> neurodamus.stimulus_manager.BaseStim
neurodamus.stimulus_manager.Sinusoidal --|> neurodamus.stimulus_manager.BaseStim
neurodamus.stimulus_manager.SubThreshold --|> neurodamus.stimulus_manager.Linear
neurodamus.target_manager.NodesetTarget --|> neurodamus.target_manager._TargetInterface
neurodamus.utils.multimap.GroupedMultiMap --|> neurodamus.utils.multimap.MultiMap
neurodamus.utils.progressbar.ProgressBar --|> neurodamus.utils.progressbar.Progress
neurodamus.cell_distributor.CellDistributor --* neurodamus.node.METypeEngine : CellManagerCls
neurodamus.cell_distributor.GlobalCellManager --* neurodamus.node.CircuitManager : global_manager
neurodamus.connection.Connection --* neurodamus.connection_manager.ConnectionManagerBase : conn_factory
neurodamus.connection.InhExcSpontMinis --* neurodamus.connection.Connection : _spont_minis
neurodamus.connection.ReplayStim --* neurodamus.connection.Connection : _replay
neurodamus.connection.SpontMinis --* neurodamus.connection.Connection : _spont_minis
neurodamus.connection_manager.ConnectionSet --* neurodamus.connection_manager.ConnectionManagerBase : _cur_population
neurodamus.connection_manager.ConnectionSet --* neurodamus.connection_manager.ConnectionManagerBase : ConnectionSet
neurodamus.connection_manager.SynapseRuleManager --* neurodamus.node.METypeEngine : InnerConnectivityCls
neurodamus.core.configuration.CliOptions.NoRestriction --* neurodamus.core.configuration.CliOptions : restrict_features
neurodamus.core.configuration.CliOptions.NoRestriction --* neurodamus.core.configuration.CliOptions : restrict_node_populations
neurodamus.core.configuration.CliOptions.NoRestriction --* neurodamus.core.configuration.CliOptions : restrict_stimulus
neurodamus.core.mechanisms.Mechanism --* neurodamus.core.cell.Cell : Mechanisms
neurodamus.core.nodeset.NodeSet --* neurodamus.cell_distributor.CellManagerBase : _local_nodes
neurodamus.core.nodeset.NodeSet --* neurodamus.cell_distributor.VirtualCellPopulation : local_nodes
neurodamus.core.nodeset.PopulationNodes --* neurodamus.core.nodeset._NodeSetBase : _population_group
neurodamus.gap_junction.GapJunctionConnParameters --* neurodamus.gap_junction.GapJunctionSynapseReader : Parameters
neurodamus.gap_junction.GapJunctionSynapseReader --* neurodamus.gap_junction.GapJunctionManager : SynapseReader
neurodamus.io.synapse_reader.SonataReader --* neurodamus.connection_manager.ConnectionManagerBase : _synapse_reader
neurodamus.io.synapse_reader.SynapseParameters --* neurodamus.io.synapse_reader.SonataReader : Parameters
neurodamus.io.synapse_reader.SynapseReader --* neurodamus.connection_manager.ConnectionManagerBase : _synapse_reader
neurodamus.io.synapse_reader.SynapseReader --* neurodamus.connection_manager.ConnectionManagerBase : SynapseReader
neurodamus.lfp_manager.LFPManager --* neurodamus.cell_distributor.GlobalCellManager : _lfp_manager
neurodamus.neuromodulation_manager.ModulationConnParameters --* neurodamus.neuromodulation_manager.NeuroModulationSynapseReader : Parameters
neurodamus.neuromodulation_manager.NeuroModulationConnection --* neurodamus.neuromodulation_manager.NeuroModulationManager : conn_factory
neurodamus.neuromodulation_manager.NeuroModulationSynapseReader --* neurodamus.neuromodulation_manager.NeuroModulationManager : SynapseReader
neurodamus.ngv.Astrocyte --* neurodamus.ngv.AstrocyteManager : CellType
neurodamus.ngv.AstrocyteManager --* neurodamus.ngv.NGVEngine : CellManagerCls
neurodamus.ngv.NeuroGliaConnParameters --* neurodamus.ngv.NeuroGlialSynapseReader : Parameters
neurodamus.ngv.NeuroGlialConnection --* neurodamus.ngv.NeuroGliaConnManager : conn_factory
neurodamus.ngv.NeuroGlialSynapseReader --* neurodamus.ngv.NeuroGliaConnManager : SynapseReader
neurodamus.node.CircuitManager --* neurodamus.node.Node : _circuits
neurodamus.stimulus_manager.StimulusManager --* neurodamus.node.Node : _stim_manager
neurodamus.target_manager.NodesetTarget --* neurodamus.node.CircuitManager : global_target
neurodamus.target_manager.TargetManager --* neurodamus.node.Node : _target_manager
neurodamus.target_manager.TargetSpec --* neurodamus.cell_distributor.CellManagerBase : _target_spec
neurodamus.target_manager.TargetSpec --* neurodamus.node.Node : _target_spec
neurodamus.utils.compat.List --* neurodamus.connection.Connection : _synapses
neurodamus.utils.compat.List --* neurodamus.connection.Connection : _synapses
neurodamus.utils.compat.Vector --* neurodamus.connection.Connection : _conductances_bk
neurodamus.utils.compat.Vector --* neurodamus.core.nodeset.NodeSet : _gidvec
neurodamus.utils.compat.Vector --* neurodamus.gap_junction.GapJunctionManager : _gj_offsets
neurodamus.utils.memory.DryRunStats --* neurodamus.connection_manager.ConnectionManagerBase : _dry_run_stats
neurodamus.utils.memory.DryRunStats --* neurodamus.node.Node : _dry_run_stats
neurodamus.utils.memory.DryRunStats --* neurodamus.node.Node : _dry_run_stats
neurodamus.utils.pyutils.ConfigT._ConfigFlag --* neurodamus.core.configuration.CircuitConfig : CircuitPath
neurodamus.utils.pyutils.ConfigT._ConfigFlag --* neurodamus.core.configuration.CircuitConfig : nrnPath
neurodamus.utils.pyutils.ConfigT._ConfigFlag --* neurodamus.utils.pyutils.ConfigT : REQUIRED
neurodamus.utils.pyutils.WeakList --* neurodamus.core.nodeset.PopulationNodes : nodesets
neurodamus.connection.Connection --o neurodamus.connection_manager.ConnectionSet : _conn_factory
neurodamus.core.cell.Cell --o neurodamus.core.cell.Cell.Builder.Section : parent
neurodamus.core.cell.Cell.Builder.Section --o neurodamus.core.cell.Cell : _builder
neurodamus.target_manager.TargetManager --o neurodamus.connection_manager.ConnectionManagerBase : _target_manager
neurodamus.utils.multimap.GroupedMultiMap --o neurodamus.replay.SpikeManager : _gid_fire_events
@enduml
