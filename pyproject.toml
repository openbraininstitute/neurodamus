[build-system]
requires = [
    "hatchling",
    "hatch-vcs",
]
build-backend = "hatchling.build"

[project]
name="neurodamus"
authors = [
    {name = "Blue Brain Project, EPFL"},
]
description = "A BBP Simulation Control application for NEURON"
license = {file = "LICENSE.txt"}
readme = "README.rst"
dynamic = ["version"]
dependencies = [
    "h5py",
    "docopt-ng",
    "libsonata",
    "psutil"
]
requires-python=">=3.9"

[project.optional-dependencies]
plotting=['matplotlib'] # only for Neurodamus HL API
full=['scipy', 'morphio', 'NEURON']

[project.scripts]
neurodamus = "neurodamus.commands:neurodamus"
hocify = "neurodamus.commands:hocify"

[project.urls]
Homepage = "https://github.com/BlueBrain/neurodamus"
Repository = "https://github.com/BlueBrain/neurodamus.git"
Tracker = "https://github.com/BlueBrain/neurodamus/issues"

[tool.hatch.build.targets.sdist]
only-include = [
    "neurodamus",
]

[tool.hatch.version]
source = "vcs"

[tool.hatch.version.raw-options]
local_scheme = "no-local-version"

[tool.pytest.ini_options]
minversion = "6.0"
addopts = [
    "--import-mode=importlib",
    "-vv",
    "-ra",
]
markers = ["slow: marks tests as slow"]

[tool.flake8]
exclude = [".*", "__pycache__", ".eggs", "*.egg", "build", "dist", "docs", "venv", "*.egg-info", "_benchmarks", "core", ".tox"]
extend-ignore = [
    "E127",  # continuation line over-indented for visual indent
    "E203",  # whitespace before ':'
    "E221",  # multiple spaces before operator
    "E226",  # missing whitespace around arithmetic operator
    "E701",  # multiple statements on one line (colon)
    "E731",  # do not assign a lambda expression, use a def
    "PT001", # use @pytest.fixture over @pytest.fixture()
    "PT023", # use @pytest.mark.foo over @pytest.mark.foo()
    "W503",  # line break before binary operator
    "W504",  # line break after binary operator
]
max-line-length = 100

[tool.coverage.run]
branch = false
parallel = false
relative_files = true
source_pkgs = [
    "neurodamus",
]

[tool.coverage.paths]
source = [
    "neurodamus/",
    "*/site-packages/neurodamus"
]

[tool.coverage.report]
show_missing = true
precision = 0

[tool.ruff]
line-length = 100

[tool.ruff.lint]
preview = true
select = ["ALL"]
ignore = [
    "COM812",  # Trailing comma (to have similar behavior to black)
    "CPY001",  # Missing copyright notice at top of file
    "D105",    # Missing docstring in magic method
    "ISC001",  # single line implicit string concatenation (disabling suggested by ruff formatter)
    "N802",    # function name should be lowercase
    "PLE1205", # Too many arguments for `logging` format string
    "RUF029",  # Function is declared `async`, but doesn't `await` or use `async` features.
    "S104",    # Possible binding to all interfaces
    "FIX002",  # Line contains TODO, consider resolving the issue
    "TD",      # TODOs
    "D415",    # First line should end with a period, question mark, or exclamation point
    "FBT002",  # Boolean default positional argument in function definition
    ### TODO: remove rules temporarily ignored
    "ANN",     # Missing type annotation
    "D301",    # Use `r"""` if any backslashes in a docstring
    "DOC201",  # `return` is not documented in docstring
    "DOC402",  # `yield` is not documented in docstring
    "DOC501",  # Raised exception missing from docstring
    "LOG015",  # `info()` call on root logger
]

[tool.ruff.lint.isort]
known-local-folder = [
    "neurodamus",
]
combine-as-imports = true

[tool.ruff.lint.per-file-ignores]
"tests/*.py" = [
    "ANN",     # Missing type annotation
    "D",       # pydocstyle
    "ERA001",  # Found commented-out code
    "INP001",  # Missing `__init__.py`
    "PLC2701", # Private name import from external module
    "PLR2004", # magic value (constant) used in comparison (i.e. expected == 3)
    "S101",    # Use of `assert` detected
    "SLF001",  # private member access
]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.pylint]
# Maximum number of arguments for function / method
max-args = 12
# Maximum number of locals for function / method body
max-locals = 15
# Maximum number of return / yield for function / method body
max-returns = 6
# Maximum number of branch for function / method body
max-branches = 12
# Maximum number of statements in function / method body
max-statements = 50
# Maximum number of public methods for a class (see R0904).
max-public-methods = 60
