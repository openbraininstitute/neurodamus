"""Test coreneuron simultion solver and direct mode
In file emode, spikes dat file is created by CoreNEURON, check the file content
In direct mode, spikes vectors are returned to NEURON, no dat file created, check the spikes vector
"""

from pathlib import Path

import numpy as np
import numpy.testing as npt
import pytest

from neurodamus import Neurodamus
from neurodamus.core.configuration import SimConfig
from tests.utils import check_directory

ref_gids = np.array([1, 2, 3, 1, 2, 3, 1, 2, 3])  # 1-based
ref_timestamps = np.array([5.1, 5.1, 5.1, 25.1, 25.1, 25.1, 45.1, 45.1, 45.1])


@pytest.mark.parametrize(
    "create_tmp_simulation_config_file",
    [
        {
            "simconfig_fixture": "ringtest_baseconfig",
            "extra_config": {
                "target_simulator": "CORENEURON",
                "node_set": "Mosaic",
                "inputs": {
                    "pulse": {
                        "module": "pulse",
                        "input_type": "current_clamp",
                        "delay": 5,
                        "duration": 50,
                        "node_set": "RingA",
                        "represents_physical_electrode": True,
                        "amp_start": 10,
                        "width": 1,
                        "frequency": 50,
                    }
                }
            }
        }
    ],
    indirect=True,
)
@pytest.mark.parametrize(
    # multicycle should limit the steps to in all cases and not throw errors
    "modelbuilding_steps", [3, 10]
)
def test_coreneuron_multicycle(create_tmp_simulation_config_file, modelbuilding_steps):
    """Test that CoreNEURON runs a multi-cycle simulation and
    produces expected spike times and GIDs as in filemode."""

    nd = Neurodamus(create_tmp_simulation_config_file, modelbuilding_steps=modelbuilding_steps)

    # check that there is 1 file per cycle + a merged file in the directory
    coreneuron_data = Path(SimConfig.coreneuron_datadir)
    check_directory(coreneuron_data)
    assert (coreneuron_data / "files.dat").exists()

    n_files = min(
        nd._target_manager.get_target(
            nd._target_spec).max_gid_count_per_population(),
        modelbuilding_steps)
    expected_files = [
        f"files_{i}.dat" for i in range(n_files)
    ]
    files_in_directory = list(coreneuron_data.glob("files_*.dat"))
    file_names = [file.name for file in files_in_directory]
    assert sorted(file_names) == sorted(expected_files)

    # check that there aren't additional files
    assert not (coreneuron_data / f"files_{n_files}.dat").exists()

    # run simulation
    nd.run()

    # check out.dat generated by CoreNEURON
    assert (Path(SimConfig.output_root) / "out.dat").exists()
    spikes = np.loadtxt(
        Path(SimConfig.output_root) / "out.dat", dtype=[("time", "double"), ("gid", "uint32")]
    )
    times = spikes["time"]
    gids = spikes["gid"]

    npt.assert_allclose(times, ref_timestamps)
    npt.assert_allclose(gids, ref_gids)
