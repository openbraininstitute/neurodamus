"""
Here we test the save/restore features (only available for CoreNEURON)
with 2 tests:

- run t0 -> t2, save the state, compare to reference at t0 and t2
- run t0 -> t1, save the state, compare to reference at t1, run t1 -> t2, compare to reference at t2
"""


import filecmp
import json
import shutil
import subprocess
from pathlib import Path

import pytest

from tests import utils

from ..conftest import RINGTEST

# spikes at ~5 and ~25 ms. 26 to be sure to get them
t1, t2 = 13, 26

# additional files and folders that coreneuron uses to restore a simulation
coreneuron_files = ["coreneuron_input", "sim.conf", "report.conf"]

# We need to move stuff around to be able to re-run the same simulation
# with different dump-cell-state values
coreneuron_files = ["coreneuron_input", "sim.conf", "report.conf"]


def move_coreneuron_files():
    """ Move the coreneuron files away to preserve them from coreneuron wrath"""
    output = Path('output')
    for name in coreneuron_files:
        source = output / name
        destination = output / f"{name}_restore_base"
        shutil.move(source, destination)

# We need to move stuff around to be able to re-run the same simulation
# with different dump-cell-state values


def restore_coreneuron_files():
    """ Restore the coreneuron files, necessary for the next simulation"""
    output = Path('output')
    for name in coreneuron_files:
        source = output / f"{name}_restore_base"
        destination = output / name

        if source.is_dir():
            shutil.copytree(source, destination, dirs_exist_ok=True)
        elif source.is_file():
            shutil.copy2(source, destination)


@pytest.mark.parametrize("create_tmp_simulation_config_file", [
    {
        "simconfig_fixture": "ringtest_baseconfig",
        "extra_config": {
            "target_simulator": "CORENEURON",
            "inputs": {
                "Stimulus": {
                    "module": "pulse",
                    "input_type": "current_clamp",
                    "delay": 5,
                    "duration": 50,
                    "node_set": "RingA",
                    "represents_physical_electrode": True,
                    "amp_start": 10,
                    "width": 1,
                    "frequency": 50
                }
            },
            "run": {
                "tstop": t2,
            },
        }
    }
], indirect=True)
def test_full_run(create_tmp_simulation_config_file):
    """
    Here we test a run up to t2. We also check the init values at t0
    """
    nrn_t0, nrn_t2 = f"{0:.6f}", f"{t2:.6f}"

    import difflib

    # check dump state
    for i in [0, 1, 2, 1000, 1001]:
        command = ["neurodamus", "simulation_config.json", f"--dump-cell-state={i}"]
        subprocess.run(command, check=True, capture_output=True)
        filename = f"{i+1}_cpu_t{nrn_t0}.corenrn"
        assert filecmp.cmp(
            filename,
            RINGTEST /
            "reference_save_restore" /
            nrn_t0 /
            filename,
            shallow=False)
        filename = f"{i+1}_cpu_t{nrn_t2}.corenrn"

        ref_file = RINGTEST / "reference_save_restore" / nrn_t2 / filename
        if not filecmp.cmp(filename, ref_file, shallow=False):
            with open(filename, 'r') as f1, open(ref_file, 'r') as f2:
                diff = difflib.unified_diff(
                    f1.readlines(),
                    f2.readlines(),
                    fromfile=str(filename),
                    tofile=str(ref_file)
                )
            print("".join(diff))
            assert False, f"Files {filename} and {ref_file} differ!"
        # assert filecmp.cmp(
        #     filename,
        #     RINGTEST /
        #     "reference_save_restore" /
        #     nrn_t2 /
        #     filename,
        #     shallow=False)

    save_dir = Path(f"output/save_{nrn_t2}")
    command = ["neurodamus", "simulation_config.json", f"--save={save_dir}"]
    subprocess.run(command, check=True, capture_output=True)
    # check out.dat generated by coreneuron
    filename = "out.dat"
    assert utils.compare_outdat_files(Path("output") / filename,
                                      RINGTEST / "reference_save_restore" / nrn_t2 / filename)
    # check time.dat
    filename = "1_2.dat"
    assert filecmp.cmp(
        save_dir /
        filename,
        RINGTEST /
        "reference_save_restore" /
        nrn_t2 /
        filename,
        shallow=False)
    # check time.dat
    filename = "time.dat"
    assert filecmp.cmp(
        save_dir /
        filename,
        RINGTEST /
        "reference_save_restore" /
        nrn_t2 /
        filename,
        shallow=False)


@pytest.mark.parametrize("create_tmp_simulation_config_file", [
    {
        "simconfig_fixture": "ringtest_baseconfig",
        "extra_config": {
            "target_simulator": "CORENEURON",
            "inputs": {
                "Stimulus": {
                    "module": "pulse",
                    "input_type": "current_clamp",
                    "delay": 5,
                    "duration": 50,
                    "node_set": "RingA",
                    "represents_physical_electrode": True,
                    "amp_start": 10,
                    "width": 1,
                    "frequency": 50
                }
            },
            "run": {
                "tstop": t1,
            },
        }
    }
], indirect=True)
def test_save_restore_run(create_tmp_simulation_config_file):
    """
    Test save/restore capabilities

    Here we:
        - run to t1
        - save
        - check results
        - restore
        - run to t2
        - save
        - check results

    We need to do some manual bookkeeping/copypasting of files
    because coreneuron uses more than just the save folder to save
    data for the next simulations. We want the cell-dump-state for multiple
    cells on the same simulation. Coreneuron does not allow to pass
    arrays of gids so we need to run multiple times the same simulation.

    However, when we ask for a save, coreneuron secretly also saves
    additional files and folders, necessary for the restore (the
    ones in `coreneuron_files`). Since they have always
    the same name it rewrites/removes them breaking the future simulations
    """
    nrn_t = f"{0:.6f}", f"{t1:.6f}", f"{t2:.6f}"

    # check dump state
    for i in [0, 1, 2, 1000, 1001]:
        command = ["neurodamus", "simulation_config.json", f"--dump-cell-state={i}"]
        subprocess.run(command, check=True, capture_output=True)
        # check cellstate i
        filename = f"{i+1}_cpu_t{nrn_t[0]}.corenrn"
        assert filecmp.cmp(
            filename,
            RINGTEST /
            "reference_save_restore" /
            nrn_t[0] /
            filename,
            shallow=False)
        filename = f"{i+1}_cpu_t{nrn_t[1]}.corenrn"
        assert filecmp.cmp(
            filename,
            RINGTEST /
            "reference_save_restore" /
            nrn_t[1] /
            filename,
            shallow=False)

    save_dir = Path(f"output/save_{nrn_t[1]}")
    command = ["neurodamus", "simulation_config.json", f"--save={save_dir}"]
    subprocess.run(command, check=True, capture_output=True)

    # test checkpoint
    assert utils.compare_outdat_files(
        "output/out.dat",
        RINGTEST /
        "reference_save_restore" /
        nrn_t[1] /
        "out.dat")
    # check time.dat
    filename = "1_2.dat"
    assert filecmp.cmp(
        save_dir /
        filename,
        RINGTEST /
        "reference_save_restore" /
        nrn_t[1] /
        filename,
        shallow=False)
    # check time.dat
    filename = "time.dat"
    assert filecmp.cmp(
        save_dir /
        filename,
        RINGTEST /
        "reference_save_restore" /
        nrn_t[1] /
        filename,
        shallow=False)

    # update tstop
    with open("simulation_config.json", "r") as f:
        sim_config = json.load(f)
        sim_config["run"]["tstop"] = t2
    with open("simulation_config.json", "w") as f:
        json.dump(sim_config, f, indent=2)

    move_coreneuron_files()
    for i in [0, 1, 2, 1000, 1001]:
        restore_coreneuron_files()
        command = [
            "neurodamus",
            "simulation_config.json",
            f"--dump-cell-state={i}",
            f"--restore={save_dir}"]
        subprocess.run(command, check=True, capture_output=True)

        # # check cellstate i
        filename = f"{i+1}_cpu_t{nrn_t[2]}.corenrn"
        assert filecmp.cmp(
            filename,
            RINGTEST /
            "reference_save_restore" /
            nrn_t[2] /
            filename,
            shallow=False)

    assert utils.compare_outdat_files(
        "output/out.dat",
        RINGTEST /
        "reference_save_restore" /
        nrn_t[2] /
        "out.dat",
        start_time=t1)
