"""
Here we test the save/restore features (only available for CoreNEURON)
with 2 tests:

- run t0 -> t2, save the state, compare to reference at t0 and t2
- run t0 -> t1, save the state, compare to reference at t1, run t1 -> t2, compare to reference at t2
"""


import json
import os
from pathlib import Path
import pytest
import subprocess
import tempfile
import filecmp
from neurodamus import Neurodamus

from tests import utils

from ..conftest import RINGTEST

# spikes at ~5 and ~25 ms. 26 to be sure to get them
t1, t2 = 13, 26

# @pytest.mark.parametrize("create_tmp_simulation_config_file", [
#     {
#         "simconfig_fixture": "ringtest_baseconfig",
#         "extra_config": {
#             "target_simulator": "CORENEURON",
#             "inputs": {
#                 "Stimulus": {
#                     "module": "pulse",
#                     "input_type": "current_clamp",
#                     "delay": 5,
#                     "duration": 50,
#                     "node_set": "RingA",
#                     "represents_physical_electrode": True,
#                     "amp_start": 10,
#                     "width": 1,
#                     "frequency": 50
#                 }
#             },
#             "run": {
#                 "tstop": t1,
#             },
#         }
#     }
# ], indirect=True)
# def test_full_run(create_tmp_simulation_config_file):
#     command = ["neurodamus", "simulation_config.json", f"--dump-cell-state={0}", f"--save=output/checkpoint"]
#     subprocess.run(command, check=True, capture_output=True)

# @pytest.mark.parametrize("create_tmp_simulation_config_file", [
#     {
#         "simconfig_fixture": "ringtest_baseconfig",
#         "extra_config": {
#             "target_simulator": "CORENEURON",
#             "inputs": {
#                 "Stimulus": {
#                     "module": "pulse",
#                     "input_type": "current_clamp",
#                     "delay": 5,
#                     "duration": 50,
#                     "node_set": "RingA",
#                     "represents_physical_electrode": True,
#                     "amp_start": 10,
#                     "width": 1,
#                     "frequency": 50
#                 }
#             },
#             "run": {
#                 "tstop": t2,
#             },
#         }
#     }
# ], indirect=True)
# def test_full_run(create_tmp_simulation_config_file):
#     """
#     Here we test a run up to t2. We also check the init values at t0
#     """
#     nrn_t0, nrn_t2 = f"{0:.6f}", f"{t2:.6f}"

#     # check dump state
#     for i in [0, 1, 2, 1000, 1001]:
#         command = ["neurodamus", "simulation_config.json", f"--dump-cell-state={i}"]
#         subprocess.run(command, check=True, capture_output=True)
#         filename = f"{i+1}_cpu_t{nrn_t0}.corenrn"
#         assert filecmp.cmp(filename, RINGTEST / "reference_save_restore" / nrn_t0 / filename, shallow=False)
#         filename = f"{i+1}_cpu_t{nrn_t2}.corenrn"
#         assert filecmp.cmp(filename, RINGTEST / "reference_save_restore" / nrn_t2 / filename, shallow=False)

#     save_dir = Path(f"output/save_{nrn_t2}")
#     command = ["neurodamus", "simulation_config.json", f"--save={save_dir}"]
#     subprocess.run(command, check=True, capture_output=True)
#     # check out.dat generated by coreneuron
#     filename = "out.dat"
#     assert utils.compare_outdat_files(Path("output") / filename, RINGTEST / "reference_save_restore" / nrn_t2 / filename)
#     # check time.dat
#     filename = "1_2.dat"
#     assert filecmp.cmp(save_dir / filename, RINGTEST / "reference_save_restore" / nrn_t2 / filename, shallow=False)
#     # check time.dat
#     filename = "time.dat"
#     assert filecmp.cmp(save_dir / filename, RINGTEST / "reference_save_restore" / nrn_t2 / filename, shallow=False)


# @pytest.mark.parametrize("create_tmp_simulation_config_file", [
#     {
#         "simconfig_fixture": "ringtest_baseconfig",
#         "extra_config": {
#             "target_simulator": "CORENEURON",
#             "inputs": {
#                 "Stimulus": {
#                     "module": "pulse",
#                     "input_type": "current_clamp",
#                     "delay": 5,
#                     "duration": 50,
#                     "node_set": "RingA",
#                     "represents_physical_electrode": True,
#                     "amp_start": 10,
#                     "width": 1,
#                     "frequency": 50
#                 }
#             },
#             "run": {
#                 "tstop": t1,
#             },
#         }
#     }
# ], indirect=True)
# def test_save_restore_run(create_tmp_simulation_config_file):
#     nrn_t0, nrn_t1, nrn_t2 = f"{0:.6f}", f"{t1:.6f}", f"{t2:.6f}"
#     save_dir = Path(f"output/save_{nrn_t2}")
#     command = ["neurodamus", "simulation_config.json", f"--save={save_dir}"]
#     subprocess.run(command, check=True, capture_output=True)

#     with open("simulation_config.json", "r") as f:
#         sim_config = json.load(f)
#         sim_config["run"]["tstop"] = t2
#     with open("simulation_config.json", "w") as f:
#         json.dump(sim_config, f, indent=2)

#     command = ["neurodamus", "simulation_config.json", f"--dump-cell-state={1}", f"--restore=output/save_{nrn_t1}", f"--save={save_dir}"]
#     subprocess.run(command, check=True, capture_output=True)

@pytest.mark.parametrize("create_tmp_simulation_config_file", [
    {
        "simconfig_fixture": "ringtest_baseconfig",
        "extra_config": {
            "target_simulator": "CORENEURON",
            "inputs": {
                "Stimulus": {
                    "module": "pulse",
                    "input_type": "current_clamp",
                    "delay": 5,
                    "duration": 50,
                    "node_set": "RingA",
                    "represents_physical_electrode": True,
                    "amp_start": 10,
                    "width": 1,
                    "frequency": 50
                }
            },
            "run": {
                "tstop": t1,
            },
        }
    }
], indirect=True)
def test_save_restore_run(create_tmp_simulation_config_file):
    """
    Test save/restore capabilities

    Here we:
        - run to t1
        - save
        - check results
        - restore
        - run to t2
        - save
        - check results
    """
    nrn_t0, nrn_t1, nrn_t2 = f"{0:.6f}", f"{t1:.6f}", f"{t2:.6f}"

    # check dump state
    save_dir = Path(f"output/save_{nrn_t1}")
    for i in [0, 1, 2, 1000, 1001]:
        command = ["neurodamus", "simulation_config.json", f"--dump-cell-state={i}", f"--save={save_dir}"]
        subprocess.run(command, check=True, capture_output=True)
        # check cellstate i
        # filename = f"{i+1}_cpu_t{nrn_t0}.corenrn"
        # assert filecmp.cmp(filename, RINGTEST / "reference_save_restore" / nrn_t0 / filename, shallow=False)
        # filename = f"{i+1}_cpu_t{nrn_t1}.corenrn"
        # assert filecmp.cmp(filename, RINGTEST / "reference_save_restore" / nrn_t1 / filename, shallow=False)

    return
#     # test checkpoint
#     assert utils.compare_outdat_files("output/out.dat", RINGTEST / "reference_save_restore" / nrn_t1 / "out.dat")
#     # check time.dat
#     filename = "1_2.dat"
#     assert filecmp.cmp(save_dir / filename, RINGTEST / "reference_save_restore" / nrn_t1 / filename, shallow=False)
#     # check time.dat
#     filename = "time.dat"
#     assert filecmp.cmp(save_dir / filename, RINGTEST / "reference_save_restore" / nrn_t1 / filename, shallow=False)

    with open("simulation_config.json", "r") as f:
        sim_config = json.load(f)
        sim_config["run"]["tstop"] = t2
    with open("simulation_config.json", "w") as f:
        json.dump(sim_config, f, indent=2)

    restore_dir = save_dir
    save_dir = Path(f"output/save_{nrn_t2}")
    for i in [0, 1, 2, 1000, 1001]:
        command = ["neurodamus", "simulation_config.json", f"--dump-cell-state={i}", f"--restore={restore_dir}", f"--save={save_dir}"]
        subprocess.run(command, check=True, capture_output=True)
